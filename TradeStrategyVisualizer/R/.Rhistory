        names(pairwise)[6] = "SDEVDIFF"
        if(numPairs == 0) {
          pairFrame = pairwise
        } else {
          pairFrame = rbind(pairFrame, pairwise)
        }
        numPairs = numPairs + 1
      }
    }
  }
  SortedOrderPairFrame = pairFrame[order(as.matrix(pairFrame$ABSCORR), decreasing=TRUE),]
  # return
  SortedOrderPairFrame  
}
SortedOrderPairFrame <- MeanRevertCorrelatePairwise(HistPricesWindow)
row.names(HistPricesWindow)
VisualizeCorrelation <- function(stockPrices, orderPairFrame, topPosition) {
  ticker1 = toString(orderPairFrame[topPosition, "TICKER1"])
  ticker2 = toString(orderPairFrame[topPosition, "TICKER2"])
  ypriceTicker1 = stockPrices[stockPrices$TICKER==ticker1,"OPEN"]
  ypricesTicker2 = stockPrices[stockPrices$TICKER==ticker2,"OPEN"]
  xtime = row.names(stockPrices)
  par(mfrow=c(2,1))
  plot(xtime, ypriceTicker1, col="blue", xlab="time", ylab="Price")
  title(ticker1)
  plot(xtime, ypriceTicker2, col="green", xlab="time", ylab="Price")
  title(ticker2)
}
VisualizeCorrelation(HistPricesWindow, SortedOrderPairFrame, 2)
VisualizeCorrelation <- function(stockPrices, orderPairFrame, topPosition) {
  ticker1 = toString(orderPairFrame[topPosition, "TICKER1"])
  ticker2 = toString(orderPairFrame[topPosition, "TICKER2"])
  ypriceTicker1 = stockPrices[stockPrices$TICKER==ticker1,"OPEN"]
  ypriceTicker2 = stockPrices[stockPrices$TICKER==ticker2,"OPEN"]
  xtime = row.names(stockPrices)
  par(mfrow=c(2,1))
  plot(xtime, ypriceTicker1, col="blue", xlab="time", ylab="Price")
  title(ticker1)
  plot(xtime, ypriceTicker2, col="green", xlab="time", ylab="Price")
  title(ticker2)
}
VisualizeCorrelation(HistPricesWindow, SortedOrderPairFrame, 2)
ypriceTicker1 = HistPricesWindow[HistPricesWindow$TICKER=="VNO", "OPEN"]
ypriceTicker1
HistPricesWindow
HistPricesWindow[1:2,]
VisualizeCorrelation <- function(stockPrices, orderPairFrame, topPosition) {
  ticker1 = toString(orderPairFrame[topPosition, "TICKER1"])
  ticker2 = toString(orderPairFrame[topPosition, "TICKER2"])
  ypriceTicker1 = stockPrices[,stockPrices$TICKER==ticker1]
  ypriceTicker2 = stockPrices[,stockPrices$TICKER==ticker2]
  xtime = row.names(stockPrices)
  par(mfrow=c(2,1))
  plot(xtime, ypriceTicker1, col="blue", xlab="time", ylab="Price")
  title(ticker1)
  plot(xtime, ypriceTicker2, col="green", xlab="time", ylab="Price")
  title(ticker2)
}
VisualizeCorrelation(HistPricesWindow, SortedOrderPairFrame, 2)
orderPairFrame = SortedOrderPairFrame
stockPrices = HistPricesWindow
  ticker1 = toString(orderPairFrame[topPosition, "TICKER1"])
  ticker2 = toString(orderPairFrame[topPosition, "TICKER2"])
orderPairFrame = SortedOrderPairFrame
stockPrices = HistPricesWindow
topPosition=2
  ticker1 = toString(orderPairFrame[topPosition, "TICKER1"])
  ticker2 = toString(orderPairFrame[topPosition, "TICKER2"])
ticker1
  ypriceTicker1 = stockPrices[,stockPrices$TICKER==ticker1]
ypriceTicker1
  ypriceTicker2 = stockPrices[,stockPrices$TICKER==ticker2]
ypriceTicker2
  xtime = row.names(stockPrices)
length(xtime)
  par(mfrow=c(2,1))
  plot(xtime, ypriceTicker1, col="blue", xlab="time", ylab="Price")
  title(ticker1)
  plot(xtime, ypriceTicker2, col="green", xlab="time", ylab="Price")
  title(ticker2)
length(ypriceTicker1)
  ticker1 = toString(orderPairFrame[topPosition, "TICKER1"])
  ticker2 = toString(orderPairFrame[topPosition, "TICKER2"])
  ypriceTicker1 = stockPrices[,ticker1]
  ypriceTicker2 = stockPrices[,ticker2]
  xtime = row.names(stockPrices)
  par(mfrow=c(2,1))
  plot(xtime, ypriceTicker1, col="blue", xlab="time", ylab="Price")
  title(ticker1)
  plot(xtime, ypriceTicker2, col="green", xlab="time", ylab="Price")
  title(ticker2)
  SortedOrderPairFrame  
GetHistStockPrice <- function(inputHistStockPrices) {
  df = read.table(inputHistStockPrices, header=TRUE, sep=",", dec=".")
  # Data Cleaning (Need to consider only ones with same number of time samples)
  # - will only consider stocks that have data for full time period
  tickerlist = unique(df["TICKER"])
  timelist = unique(df["TIMESTAMP"])
  ntimeunits = nrow(timelist) 
  pricesFrame = data.frame(row.names=timelist)
  numStocks = 0
  for(i in 1:nrow(tickerlist)) {
    tickersymbol = toString(tickerlist[i,"TICKER"])
    numsamples = length(df[df$TICKER==tickersymbol,"TIMESTAMP"])
    if(numsamples == ntimeunits) {
      # a stock we want to use
      prices = data.frame(df[df$TICKER==tickersymbol, "OPEN"], row.names=df[df$TICKER==tickersymbol, "TIMESTAMP"])
      if(numStocks == 0) {
        priceFrame = prices
      } else {
        priceFrame = cbind(priceFrame, prices)
      }
      numStocks = numStocks + 1
      names(priceFrame)[numStocks] = tickersymbol
    }
  }
  priceFrame = priceFrame[order(row.names(priceFrame)),]
  priceFrame
}
MeanRevertCorrelatePairwise <- function(PricesWindow, corrThreshold=0.95) {
  # Compute correlation (NxN matrix)
  corrFrame = cor(PricesWindow, method="pearson")
  # Replace diagonal with zero (some we don't pick the same stock)
  numPairs = 0
  for(i in 2:nrow(corrFrame)) {
    rowTicker = row.names(corrFrame)[i]
    for(j in 1:(i-1)) {
      colTicker = row.names(corrFrame)[j]
      corrValue = corrFrame[i,j]
      absCorrValue = abs(corrValue)
      if(absCorrValue >= corrThreshold) {
        # compute Expected diff
        diff = PricesWindow[,rowTicker] - PricesWindow[,colTicker]
        expDiff = mean(diff)
        sdDiff = sd(diff)
        #print(c(rowTicker, colTicker, corrValue, absCorrValue, expDiff, sdDiff))
        pairwise = data.frame(t(c(rowTicker, colTicker, corrValue, absCorrValue, expDiff, sdDiff)))
        names(pairwise)[1] = "TICKER1"
        names(pairwise)[2] = "TICKER2"
        names(pairwise)[3] = "CORR"
        names(pairwise)[4] = "ABSCORR"
        names(pairwise)[5] = "MEANDIFF"
        names(pairwise)[6] = "SDEVDIFF"
        if(numPairs == 0) {
          pairFrame = pairwise
        } else {
          pairFrame = rbind(pairFrame, pairwise)
        }
        numPairs = numPairs + 1
      }
    }
  }
  SortedOrderPairFrame = pairFrame[order(as.matrix(pairFrame$ABSCORR), decreasing=TRUE),]
  # return
  SortedOrderPairFrame  
}
VisualizeCorrelation <- function(stockPrices, orderPairFrame, topPosition) {
orderPairFrame = SortedOrderPairFrame
stockPrices = HistPricesWindow
topPosition=2
  ticker1 = toString(orderPairFrame[topPosition, "TICKER1"])
  ticker2 = toString(orderPairFrame[topPosition, "TICKER2"])
  ypriceTicker1 = stockPrices[,ticker1]
  ypriceTicker2 = stockPrices[,ticker2]
  xtime = row.names(stockPrices)
  par(mfrow=c(2,1))
  plot(xtime, ypriceTicker1, col="blue", xlab="time", ylab="Price")
  title(ticker1)
  plot(xtime, ypriceTicker2, col="green", xlab="time", ylab="Price")
  title(ticker2)
}
HistPricesWindow <- GetHistStockPrice("C:/DATA/ProjectCode/SP500prices.csv")
SortedOrderPairFrame <- MeanRevertCorrelatePairwise(HistPricesWindow)
VisualizeCorrelation(HistPricesWindow, SortedOrderPairFrame, 2)
GetStockMarketOverTime <- function(inputStockMarketFile) {
  stockMarket = read.table(inputStockMarketFile, header=TRUE, sep=",", dec=".")
  # return
  stockMarket
}
stockMarketDataset <- GetStockMarketOverTime("C:/DATA/ProjectCode/SP500prices.csv")
portfolioInfo <- data.frame(c(1,2,3))
portfolioInfo
portfolioInfo <- list()
portfolioInfo[["ID"]] = 1234
portfolioInfo[["BALANCE"]] = 4000
portfolioInfo
GetStockMarketOverTime <- function(inputStockMarketFile) {
  stockMarket = read.table(inputStockMarketFile, header=TRUE, sep=",", dec=".")
  # return (should be sorted by time)
  stockMarket
}
stockMarketDataset <- GetStockMarketOverTime("C:/DATA/ProjectCode/SP500prices.csv")
stockMarketDataset[1:2,]
stockMarketDataset <- stockMarketDataset[order(stockMarketDataset$TIMESTAMP),]
stockMarketDataset[1:2,]
GetStockMarketOverTime <- function(inputStockMarketFile) {
  stockMarket = read.table(inputStockMarketFile, header=TRUE, sep=",", dec=".")
  stockMarket = stockMarket[order(stockMarket$TIMESTAMP),]
  # return (stock info sorted by time)
  stockMarket
}
stockMarketDataset <- GetStockMarketOverTime("C:/DATA/ProjectCode/SP500prices.csv")
stockMarketDataset[1,"TIMESTAMP"]
stockMarketDataset[nrow(stockMarketDataset), "TIMESTAMP"]
stockMarketDataset[stockMarketDataset$TIMESTAMP,]
stockMarketDataset[stockMarketDataset$TIMESTAMP==40169,]
startTimestamp <- stockMarketDataset[1,"TIMESTAMP"]
startTimestamp
buyCandidates <- stockMarketDataset[stockMarketDataset$TIMESTAMP==startTimestamp, ]
buyCandidates
length(buyCandidates)
nrow(buyCandidates)
sample(1:10,1)
sample(1:10,1)
sample(1:nrow(buyCandidates),1)
sample(1:nrow(buyCandidates),101)
sample(1:nrow(buyCandidates),10)
buyCandidates[sample(1:nrow(buyCandidates),10),]
source("StrategySimulator.R")
source("StrategyRandomBuyHold.R")
source("StrategyCorrelatePairwiseOffline.R")
stockMarketDataset <- GetStockMarketOverTime("SP500prices.csv")
testPortfolioInfo <- CreatePortfolio(123, 100000)
testOrderBook <- RandomBuyAndHold_Run(testPortfolioInfo, stockMarketDataset)
testBrokerBook <- SimulateBrokerOnPortfolio(testPortfolioInfo, testOrderBook, stockMarketDataset)
testBrokerBook
names(stockMarketDataset)
stockMarketDataset[stockMarketDatset$TIMESTAMP=="40046", ]
stockMarketDataset[stockMarketDatset$TIMESTAMP==40046, ]
stockMarketDataset[stockMarketDataset$TIMESTAMP==40046, ]
GetHistStockPrice <- function(inputHistStockPrices) {
  df = read.table(inputHistStockPrices, header=TRUE, sep=",", dec=".")
  # Data Cleaning (Need to consider only ones with same number of time samples)
  # - will only consider stocks that have data for full time period
  tickerlist = unique(df["TICKER"])
  timelist = unique(df["TIMESTAMP"])
  ntimeunits = nrow(timelist)
  pricesFrame = data.frame(row.names=timelist)
  numStocks = 0
  for(i in 1:nrow(tickerlist)) {
    tickersymbol = toString(tickerlist[i,"TICKER"])
    numsamples = length(df[df$TICKER==tickersymbol,"TIMESTAMP"])
    if(numsamples == ntimeunits) {
      # a stock we want to use
      prices = data.frame(df[df$TICKER==tickersymbol, "OPEN"], row.names=df[df$TICKER==tickersymbol, "TIMESTAMP"])
      if(numStocks == 0) {
        priceFrame = prices
      } else {
        priceFrame = cbind(priceFrame, prices)
      }
      numStocks = numStocks + 1
      names(priceFrame)[numStocks] = tickersymbol
    }
  }
  priceFrame = priceFrame[order(row.names(priceFrame)),]
  # return (sorted by time, opening stock prices of different companies)
  priceFrame
}
MeanRevertCorrelatePairwise <- function(PricesWindow, corrThreshold=0.95) {
  # Compute correlation (NxN matrix)
  corrFrame = cor(PricesWindow, method="pearson")
  # Replace diagonal with zero (some we don't pick the same stock)
  numPairs = 0
  for(i in 2:nrow(corrFrame)) {
    rowTicker = row.names(corrFrame)[i]
    for(j in 1:(i-1)) {
      colTicker = row.names(corrFrame)[j]
      corrValue = corrFrame[i,j]
      absCorrValue = abs(corrValue)
      if(absCorrValue >= corrThreshold) {
        # compute Expected diff
        diff = PricesWindow[,rowTicker] - PricesWindow[,colTicker]
        expDiff = mean(diff)
        sdDiff = sd(diff)
        #print(c(rowTicker, colTicker, corrValue, absCorrValue, expDiff, sdDiff))
        pairwise = data.frame(t(c(rowTicker, colTicker, corrValue, absCorrValue, expDiff, sdDiff)))
        names(pairwise)[1] = "TICKER1"
        names(pairwise)[2] = "TICKER2"
        names(pairwise)[3] = "CORR"
        names(pairwise)[4] = "ABSCORR"
        names(pairwise)[5] = "MEANDIFF"
        names(pairwise)[6] = "SDEVDIFF"
        if(numPairs == 0) {
          pairFrame = pairwise
        } else {
          pairFrame = rbind(pairFrame, pairwise)
        }
        numPairs = numPairs + 1
      }
    }
  }
  SortedOrderPairFrame = pairFrame[order(as.matrix(pairFrame$ABSCORR), decreasing=TRUE),]
  # return
  SortedOrderPairFrame
}
VisualizeCorrelation <- function(stockPrices, orderPairFrame, topPosition) {
  ticker1 = toString(orderPairFrame[topPosition, "TICKER1"])
  ticker2 = toString(orderPairFrame[topPosition, "TICKER2"])
  ypriceTicker1 = stockPrices[,ticker1]
  ypriceTicker2 = stockPrices[,ticker2]
  xtime = row.names(stockPrices)
  par(mfrow=c(2,1))
  plot(xtime, ypriceTicker1, col="blue", xlab="time", ylab="Price")
  title(ticker1)
  plot(xtime, ypriceTicker2, col="green", xlab="time", ylab="Price")
  title(ticker2)
}
PairwiseOfflineCorrelation_Run <- function(stockMarketOverTime) {
  # return orderbook (TODO)
}
HistPricesWindow <- GetHistStockPrice("C:/DATA/ProjectCode/SP500prices.csv")
SortedOrderPairFrame <- MeanRevertCorrelatePairwise(HistPricesWindow)
VisualizeCorrelation(HistPricesWindow, SortedOrderPairFrame, 2)
install.packages("RSQLite")
install.packages("DBI")
# ============== Dependencies =================
setwd("C:/DATA/ProjectCode/TradeStrategyVisualizer/R")
source("commonUtils.R")
#source("dbUtils.R")
source("dbUtilsWin.R")
source("visUtils.R")
source("gvis2.R")
source("gvisAnnotatedTimeLine2.R")
source("gvisMotionChart2.R")
pause <- function(){  
  invisible(readline("\nPress <return> to continue: ")) 
}
#
#  TradeVisualiazer demo
#
# initialization
# sqlite database
schemaDbName = "C:/DATA/ProjectCode/TradeStrategyVisualizer/R/sim.db"
schemaStocksTableName = "stocks"
schemaMarketTableName = "market"
schemaPortfoliosTableName = "portfolios"
schemaHoldingsTableName = "holdings"
schemaTransactionsTableName = "transactions"
schemaHoldingsValueTableName = "holdingsvalue"
schemaPairCorrelationInfoTableName = "pairCorrelationInfo"
schemaAnnotationsTableName = "annotations"
# bootstrap data
# read TradeStrategySimulator result from DB, courtesy of Winnie Cheng
stocksData <- readFromDB(schemaStocksTableName)
# ============== Dependencies =================
setwd("C:/DATA/ProjectCode/TradeStrategyVisualizer/R")
source("commonUtils.R")
source("dbUtils.R")
source("visUtils.R")
source("gvis2.R")
source("gvisAnnotatedTimeLine2.R")
source("gvisMotionChart2.R")
pause <- function(){  
  invisible(readline("\nPress <return> to continue: ")) 
}
#
#  TradeVisualiazer demo
#
# initialization
# sqlite database
schemaDbName = "C:/DATA/ProjectCode/TradeStrategyVisualizer/R/sim.db"
schemaStocksTableName = "stocks"
schemaMarketTableName = "market"
schemaPortfoliosTableName = "portfolios"
schemaHoldingsTableName = "holdings"
schemaTransactionsTableName = "transactions"
schemaHoldingsValueTableName = "holdingsvalue"
schemaPairCorrelationInfoTableName = "pairCorrelationInfo"
schemaAnnotationsTableName = "annotations"
library(RSQLite)
library(ggplot2)
library(RJSONIO)
library(googleVis)
# ============== Dependencies =================
setwd("C:/DATA/ProjectCode/TradeStrategyVisualizer/R")
source("commonUtils.R")
source("dbUtils.R")
source("visUtils.R")
source("gvis2.R")
source("gvisAnnotatedTimeLine2.R")
source("gvisMotionChart2.R")
pause <- function(){  
  invisible(readline("\nPress <return> to continue: ")) 
}
#
#  TradeVisualiazer demo
#
# initialization
# sqlite database
schemaDbName = "C:/DATA/ProjectCode/TradeStrategyVisualizer/R/sim.db"
schemaStocksTableName = "stocks"
schemaMarketTableName = "market"
schemaPortfoliosTableName = "portfolios"
schemaHoldingsTableName = "holdings"
schemaTransactionsTableName = "transactions"
schemaHoldingsValueTableName = "holdingsvalue"
schemaPairCorrelationInfoTableName = "pairCorrelationInfo"
schemaAnnotationsTableName = "annotations"
# bootstrap data
# read TradeStrategySimulator result from DB, courtesy of Winnie Cheng
stocksData <- readFromDB(schemaStocksTableName)
head stocksData
head (stocksData)
portfoliosData <- readFromDB(schemaPortfoliosTableName)
head(portfoliosData)
marketData <- readFromDB(schemaMarketTableName)
head(marketData)
holdingsData <- readFromDB(schemaHoldingsTableName)
head(holdingsData)
transactionsData <- readFromDB(schemaTransactionsTableName)
head(transactionsData)
pairCorrelationInfoData <- readFromDB(schemaPairCorrelationInfoTableName)
head(pairCorrelationInfoData)
annotationsData <- readFromDB(schemaAnnotationsTableName)
head(annotationsData)
histMarketData <- readFromDB(schemaMarketTableName,where=" where ticker in (select distinct ticker from transactions)")
head(histMarketData)
sumHoldings <- calcSumHoldings(histMarketData,holdingsData)
head(sumHoldings)
#
# visualization
#
# data is from 2009/08/21 - 2010/08/20
## ggplot
# plot holding summary
# with caption
yrng <- range(sumHoldings$x)
xrng <- range(sumHoldings$txdate)
caption <- "Overall Returns:"
for (i in 1:nrow(portfoliosData)) {
   text <- paste(portfoliosData$ALGORITHM[i]," ",round(portfoliosData$PERFORMANCE[i],2),"%",sep="")
   caption <- paste(caption,text,sep="\n")
}
portfolioHoldingSummaryChart(sumHoldings,portfoliosData,xrng,yrng,caption)
pause()
# without caption
portfolioHoldingSummaryChart(sumHoldings,portfoliosData)
pause()
# plot stocks correlation matrix
corrMatrixData <- pairCorrelationInfoData[1:10,]
head(corrMatrixData)
stockCorrMatrixChart(data=corrMatrixData)
pause()
# plot correlated stocks in pairs
sMarketData <- subset(marketData,TICKER %in% corrMatrixData$TICKER1 | TICKER %in% corrMatrixData$TICKER2)
head(sMarketData)
stockCorrPairsCartesianChart(sMarketData,corrMatrixData)
pause()
# cartesian chart of stocks prices that we own
sPrices = subset(marketData,TICKER %in% transactionsData$TICKER)
head(sPrices)
portfolioStocksChart(data=sPrices)
pause()
# boxplot of all the stocks that we own
portfolioBoxPlot(mData=marketData,tData=transactionsData)
pause()
# individual stock price heat map
# stocks from our db
calendarHeatMap(marketData,ticker="A")
pause()
calendarHeatMap(marketData,ticker="YHOO")
pause()
#
# experimentations with googleVis
#
# set chart title and description
cTitle <- "<h3>Annotated Time Line Portfolio Summary Chart</h3>"
cDesc <- "<br/>Trade Strategy Simulation Result of Mean Reverting vs. Buy Random and Hold Algorithm"
# set chart options
# ZZZ for unknown reasons,min doesn't seem to work as expected
cOpts <- list(displayAnnotations=TRUE,width=800,height=400,min=50000)
gvisATLData <- merge(sumHoldings,portfoliosData,by.x="id",by.y="PORTFOLIOID")
gvisATLData <- merge(x=gvisATLData,y=annotationsData, by=c("id","txdate"), all.x=TRUE)
gvisATLData$title <- NA
head(gvisATLData)
AnnoTimeLine <- gvisAnnotatedTimeLine2(gvisATLData,
   datevar="txdate",
   numvar="x",
   idvar="ALGORITHM",
   titlevar="title",
   annotationvar="annotation",
   options=cOpts,
   charttitle=cTitle,
   chartdesc=cDesc
   )
plot(AnnoTimeLine)
pause()
# motion chart
gvisMCData <- merge(sumHoldings,portfoliosData,by.x="id",by.y="PORTFOLIOID")
gvisMCData$Year <- as.POSIXlt(gvisMCData$txdate)$year + 1900
head(gvisMCData)
state='{"time":"2009-08-21","yZoomedDataMin":98333,"xZoomedDataMax":1282262400000,"sizeOption":"_UNISIZE","orderedByX":false,"dimensions":{"iconDimensions":["dim0"]},"xZoomedIn":false,"yZoomedDataMax":143280,"yZoomedIn":false,"iconType":"BUBBLE","playDuration":15088.88888888889,"showTrails":true,"xAxisOption":"_TIME","iconKeySettings":[{"key":{"dim0":"RANDOM_BUY_HOLD"},"trailStart":"2009-08-21"},{"key":{"dim0":"MEAN_REVERT"},"trailStart":"2009-08-21"}],"yLambda":1,"xZoomedDataMin":1250812800000,"xLambda":1,"nonSelectedAlpha":0.4,"yAxisOption":"3","duration":{"timeUnit":"D","multiplier":1},"orderedByY":false,"uniColorForNonSelected":false,"colorOption":"2"}'
MCtitle <- '<h3>Trade Strategies Comparison Motion Chart</h3>'
MCdesc <- "<br/>Trade Strategy Simulation Result of Mean Reverting vs. Buy Random and Hold Algorithm"
MotionChart <- gvisMotionChart2(gvisMCData, idvar="ALGORITHM", timevar="txdate",date.format = "/%Y-/%m-/%d",options=list(state=state,width=800,height=450),charttitle=MCtitle,chartdesc=MCdesc)
plot(MotionChart)
pause()
# clean ups
rm(stocksData)
rm(portfoliosData)
rm(marketData)
rm(holdingsData)
rm(transactionsData)
rm(pairCorrelationInfoData)
rm(annotationsData)
rm(histMarketData)
rm(sumHoldings)
rm(corrMatrixData)
rm(sMarketData)
rm(sPrices)
rm(xrng,yrng,caption)
rm(cTitle,cDesc,cOpts,gvisATLData)
